vars: {
  page-name: React App
  server-name: Express Server
  db-name: MongoDB
  img-uploade-name: Image Uploader
  dbImg-name: Cloudinary Server
}

label.style.font-color: black

classes: {
  text-black: {
    style: {
      font-color: black
    }
  }

  return arrow: {
    style: {
      stroke-dash: 3
      stroke: black
      font-color: black
    }
  }

  frame: {
    style: {
      fill: '#EAEDF0'
      stroke-width: 1
    }
  }

  label right: {
    style.font-color: black
  }
}

shape: sequence_diagram

user: {
  shape: image
  width: 50
  height: 60
  icon: https://upload.wikimedia.org/wikipedia/commons/5/5b/Robustness_Diagram_Actor.svg
}

page: ${page-name}
server: ${server-name}
iu: ${img-uploade-name}
db: ${db-name} {
  width: 100
  height: 90
  shape: cylinder
}
dbImg: ${dbImg-name} {
  width: 130
  height: 90
  shape: cylinder
}

user -> page.p: Fill in reply modal, press reply {class: text-black}
page.p -> server.reply: Send PUT request to reply post {class: text-black}
server.reply -> db.find: Search for targeted User {class: text-black}

alt: {
  class: frame
  \[An error was thrown\]: {
    server.reply <- db.find: Throw error {class: return arrow}
    page.p <- server.reply: Return response with status code 500 {class: return arrow}
    user <- page.p: Show error message "error in reply user..." {class: return arrow}
  }
  \[No error was thrown\]: {
    alt2: "alt" {
      class: frame
      \[There is no text in request body\]: {
        page.p <- server.reply: Return response with status code 400 {class: return arrow}
        user <- page.p: Show error message "Text is required" {class: return arrow}
      }
      else: {
        server.reply -> db.findPost: Find the post that is being replied {class: return arrow}
        server.reply <- db.findPost: Return response {class: return arrow}
        alt3: "alt" {
          class: frame
          \[Post not found\]: {
            server.reply <- db.findOne: Return null {class: return arrow}
            page.p <- server.reply: Return response with status code 400 {class: return arrow}
          }
          else: {
            opt: {
              class: frame
              \[There is image in the request body\]: {
                server.reply -> iu.uploadImage: Upload the image {class: text-black}
                iu.uploadImage -> dbImg.upload: Upload the image {class: text-black}
                iu.uploadImage <- dbImg.upload: Return response {class: return arrow}
                server.reply <- iu.uploadImage: Return uploaded image's url {class: return arrow}
              }

              server.reply -> db.create: Create the comment {class: text-black}
              server.reply <- db.create: Return response {class: return arrow}
              page.p <- server.reply: Return response with status code 200 {class: return arrow}
              user <- page.p: Show message "Create comment successully" {class: return arrow}
            }
          }
        }
      }
      \[An error was thrown\]: {
        opt2: opt {
          class: frame
          \[Already uploaded the comment's image\]: {
            server.reply -> iu.removeImage: Remove the image {class: text-black}
            iu.removeImage -> dbImg.remove: Remove the image {class: text-black}
            iu.removeImage <- dbImg.remove: Return response {class: return arrow}
            server.reply <- iu.removeImage: Return status {class: return arrow}
          }
        }

        page.p <- server.reply: Return error response {class: return arrow}
        user <- page.p: Show error message {class: return arrow}
      }
    }
  }
}
